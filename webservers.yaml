---
########### All the operations on localhost #############
- hosts: localhost
  vars:
    sgname: testsg
    lbssgname: lbssg
    vpcid: vpc-40714a3b
    vpcsubnet: subnet-ba978985
    region: us-east-1
    kpname: my_keypair
    ins_type: t2.micro
    img_id: ami-6871a115
    count: 2
    ins_name: ansible_demo
    elbname: test-lbs
  tasks:
    # Example git checkout from Ansible Playbooks
    - name: ensure git installed
      yum:
        name: git
        state: latest
    - git:
        repo: 'https://github.com/vinitbhamare/testweb.git'
        dest: /home/ec2-user/environment/testweb/
        version: master
    ########### creating a security group #############
    - name: creating a security group
      ec2_group:
        name: "{{ sgname }}"
        description: my webserver sg
        vpc_id: "{{ vpcid }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow ports 80 & 22
      register: testsg_out
    - debug:
        var: testsg_out
        
    ########### creating a keypair #############
    - name: create key pair using key_material obtained using 'file' lookup plugin
      ec2_key:
        name: "{{ kpname }}"
        key_material: "{{ lookup('file', '/home/ec2-user/environment/my-key.pub') }}"
      register: testkp_out
    - debug:
        var: testkp_out        
    
    ########### creating EC2 instances #############
    - ec2:
        exact_count: "{{ count }}"
        count_tag:
          Name: "{{ ins_name }}"
        key_name: "{{ kpname }}"
        instance_type: "{{ ins_type }}"
        image: "{{ img_id }}"
        wait: yes
        group: "{{ sgname }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ vpcsubnet }}"
        assign_public_ip: yes
        instance_tags:
            Name: "{{ ins_name }}"
      register: ec2_out
    - debug:
        var: ec2_out
        
    ########### create HOSTs group #############
    - name: add host to group "{{ ins_name }}"
      add_host:
        name: "{{ item.dns_name }}"
        groups: webservers
      loop: "{{ ec2_out.tagged_instances }}"
      register: host_out
    - debug:
        var: host_out
        
    ########### wait and connect #############
    - name: wait for connection
      wait_for:
        host: "{{ item.dns_name }}"
        port: 22
        delay: 5
        timeout: 360
        state: started
      loop: "{{ ec2_out.tagged_instances }}"
      
    ########### New security group for load balancer #############
    - name: creating a security group for load balancer
      ec2_group:
        name: "{{ lbssgname }}"
        description: my lbs sg
        vpc_id: "{{ vpcid }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow ports 80 for lb
      register: lbssg_out
    - debug:
        var: lbssg_out
        
    ########### Create load balancer #############
    - name: Basic provisioning for lbs
      ec2_elb_lb:
        name: "{{ elbname }}"
        region: "{{ region }}"
        state: present
        zones:
          - us-east-1e
        security_group_names: "{{ lbssgname }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80
      register: lbs_out
    - debug:
        var: lbs_out
        
    ########### Register all EC2 instances with Load Balancer #############
    - name: Instance Register
      ec2_elb:
        instance_id: "{{ item.id }}"
        ec2_elbs: "{{ elbname }}"
        region: "{{ region }}"
        state: present
      loop: "{{ ec2_out.tagged_instances }}"

########### All the operations on webservers #############
- hosts: webservers
  become: True
  gather_facts: True
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: /home/ec2-user/environment/my-key.pem
  tasks:
    ########### Install Apache HTTP server #############
    - name: ensure apache is at the latest version
      yum:
        name: httpd
        state: latest
    
    ########### Run the server #############
    - name: ensure apache is running
      service:
        name: httpd
        state: started
    
    ########### Copy the changes and notify #############
    - name: Templating the httpd.conf
      template:
        src: /home/ec2-user/environment/files/httpd.j2
        dest: /etc/httpd/conf/httpd.conf
      notify: restart apache
      
    ########### File copy #############
    - copy:
        src: files/index.html
        dest: /var/www/html/index.html
    - copy:
        src: files/new.html
        dest: /var/www/html/new.html
    - copy:
        src: testweb/
        dest: /var/www/html/
  
  ########### Notification handler #############
  handlers:
    - name: restart apache
      service:
        name: httpd
        state: restarted
